name: 'Initial Deploy Action'

description: >
  ðŸª‚  Initial action to deploy

branding:
  icon: 'command'
  color: 'red'

inputs:
  actor:
    description: 'The deploy actor'
    required: true
  token:
    description: 'The deploy token'
    required: true
  credentials:
    description: 'The gcloud credentials'
    required: true
  base:
    description: 'The path to .github folder'
    required: true
  tmp:
    description: 'The temporary path'
    required: true
  action_path:
    description: 'Path to the requirements file'
    required: true
  hub_username:
    description: Username for Docker Hub
    default: ${{ github.actor }}       
    required: true
  hub_password:
    description: Docker Hub authentication token
    required: true
  hub_token:
    description: Docker Hub authentication token
    required: true

runs:
  using: composite
  steps:
    - name: ðŸ’Ž Get the latest commit message
      id: commit
      shell: bash
      run: |
        git config --global user.name "${{ inputs.actor }}"
        git config --global user.email "${{ inputs.actor }}@users.noreply.github.com"

        git config --global core.autocrlf false
        git config --global --add safe.directory "${{ github.workspace }}"       
       
        echo 'LATEST_COMMIT='$(curl -s "https://api.github.com/users/eq19/events/public" | jq ".[0].payload.commits[0].message") > ${GITHUB_ENV}

    - name: ðŸ’Ž Update workflow conveniently
      if: runner.os != 'Windows'
      id: update
      shell: bash
      run: |
        BASE=/home/runner/work/_actions/eq19/eq19/v1/.github 
        REMOTE_REPO="https://${{ inputs.actor }}:${{ inputs.token }}@github.com/${{ github.repository }}.git"

        cd "${{ github.workspace }}" && rm -rf .github
        cp -r "$BASE" . && chown -R "$(whoami)" .github

        git remote set-url origin $REMOTE_REPO        
        git add . && git commit -m ${{ env.LATEST_COMMIT }} && git push

        if [ $? -eq 0 ]; then exit 1; fi

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.hub_username }}
        password: ${{ inputs.hub_token }} 
        
    - uses: actions/setup-python@v5
      if: runner.os != 'Windows'
      with:
        python-version: 3.12
        allow-prereleases: true

    - uses: actions/cache@v4
      if: runner.os != 'Windows'
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip

    - name: Install dependencies
      if: runner.os != 'Windows'
      shell: bash
      run: |
        HEADER="Accept: application/vnd.github+json"
        echo ${{ inputs.token }} | gh auth login --with-token
        python -m pip -q install --upgrade pip setuptools six wheel
        python -m pip -q install -r ${{ inputs.action_path }}/requirements-dev.txt && ./.github/entrypoint/init.sh

        #See: https://docs.github.com/en/rest/actions/self-hosted-runners
        TOTAL_COUNT=$(gh api -H "${HEADER}" /repos/${{ github.repository }}/actions/runners --jq '.total_count')
        RUNNER_ID=$(gh api -H "${HEADER}" /repos/${{ github.repository }}/actions/runners --jq '.runners.[].id')
        if (( $TOTAL_COUNT != 0 )); then gh api --method DELETE -H "${HEADER}" /repos/${{ github.repository }}/actions/runners/${RUNNER_ID}; fi 

    - name: ðŸ’Ž Set Credential
      if: runner.os == 'Windows'
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'id_token'
        credentials_json: ${{ inputs.credentials }}
        id_token_audience: 'https://us-central1-feedmapping.cloudfunctions.net/function'

    #Ref: https://github.com/google-github-actions/auth/blob/main/docs/EXAMPLES.md#generating-an-id-token-jwt
    - name: Run identity
      if: runner.os == 'Windows'
      shell: bash
      run: |
        IDENTITY=${{ steps.auth.outputs.id_token }}
        curl -s -X POST https://us-central1-feedmapping.cloudfunctions.net/function \
          -H "Authorization: Bearer $IDENTITY" -H "Content-Type: application/json" -d '{}'

    - name: ðŸ’Ž Setup Gcloud
      if: runner.os == 'Windows'
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        install_components: 'alpha,cloud-datastore-emulator'

    # Ref: https://cloud.google.com/compute/docs/instances/create-start-instance
    - name: ðŸ’Ž Remove Existing Self-Hosted Runner
      if: runner.os == 'Windows'
      shell: bash
      run: |
        for instance_uri in $(gcloud compute instances list --uri 2> /dev/null); do
          instance_name=${instance_uri##*/}
          instance_zone_uri=${instance_uri/\/instances\/${instance_name}/}
          instance_zone=${instance_zone_uri##*/}
          if [ -n "${instance_name}" ] && [ -n "${instance_zone}" ] && gcloud compute instances delete ${instance_name} --zone ${instance_zone} --quiet; then
            echo "deleted: ${instance_zone}/${instance_name}"
          fi
        done
        echo 'DATASET_URL='$(gcloud functions describe function --gen2 --region="us-central1" --format="value(serviceConfig.uri)") > ${GITHUB_ENV}            
        BASE="D:/a/_actions/eq19/eq19/v1/.github"
        $BASE/entrypoint/init.sh

    - name: View context attributes
      uses: actions/github-script@v7
      with:
        script: console.log(context)
