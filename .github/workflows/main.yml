# üíé Main Workflow: eQuantum MEC Structure
name: Build and Deploy Cell Types ‚Äì Modulo 6
#
# The semantics for running shell commands in GitHub actions is non-obvious. Please read
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell
# before modifying this file. Our strategy is to rely on the built-in (unspecified) shell, and
# explicitly set the shell settings we want (with `set -eo pipefail`) at the beginning of any
# bash script. For more information on these settings, see `man bash`.
#
# GitHub Actions files can be difficult to modify with confidence, because testing changes often
# requires pushing to a branch and running CI remotely. To make this process easier, consider
# the following:
#
# 1) Use Visual Studio Code with the GitHub Actions Extension (github.vscode-github-actions).
#    This allows you to check the validity of your action schema and syntax without pushing to a
#    branch.
# 2) Use https://github.com/nektos/act to run your CI steps locally. Note this will only work with
#    steps run on Linux platforms, as `act` is implemented with Docker containers.
# 3) Use https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#using-job-outputs-in-a-matrix-job
#    to share environment variables across multiple runners
#
on:
  push:
  workflow_run:
    types: [completed]
    workflows: ["pages-build-deployment"]

# üí¢ Allow concurrent
concurrency:
  group: "pages"
  cancel-in-progress: true

# ‚ö†Ô∏è Set GITHUB_TOKEN
permissions: write-all
        
jobs:
  lexering:
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        #node_version: [8, 10, 12]
        config:
          - { os: ubuntu-latest, id: 1 }
          - { os: windows-latest, id: 2 }
    
    # ‚úîÔ∏è Runs on workflow_run
    runs-on: ${{ matrix.config.os }}
    if: ${{github.event_name == 'push' ||
        github.event.workflow_run.conclusion == 'success'}}

    steps:
      - name: üìÇ Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: ‚öôÔ∏è Build Maps
        uses: eq19/maps@v2
        id: build-parser
        with:
          tmp: ${{ matrix.config.id }}
          token: ${{ secrets.ACCESS_TOKEN }}
          credentials: ${{ secrets.GCP_CREDENTIALS }}
          docker_hub_token: ${{ secrets.DOCKER_HUB_TOKEN }}
          docker_hub_password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: ü™Ç Feed Mapping
        uses: eq19/feed@v3
        id: feed-mapping
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          credentials: ${{ secrets.GCP_CREDENTIALS }}
          docker_hub_token: ${{ secrets.DOCKER_HUB_TOKEN }}
          docker_hub_password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: üèÉ‚Äç‚ôÇÔ∏è Lexering Runner
        uses: eq19/lexer@v1
        id: set-lexering
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          credentials: ${{ secrets.GCP_CREDENTIALS }}
          docker_hub_token: ${{ secrets.DOCKER_HUB_TOKEN }}
          docker_hub_password: ${{ secrets.DOCKER_HUB_PASSWORD }}
          #build_id: ${{ steps.feed-mapping.outputs.output_2 }}
          
    outputs:
      output_1: ${{ steps.build-parser.outputs.output_1 }}
      output_2: ${{ steps.feed-mapping.outputs.output_2 }}
      output_3: ${{ steps.set-lexering.outputs.output_3 }}

  setup-parser:
    needs: lexering
    strategy:
      matrix:
        os: [self-hosted]
            
    # ‚ôªÔ∏è Simulate Gell-Mann           
    runs-on: ${{ matrix.os }}

    steps:
      - name: üìÇ Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: ‚ûø Parsering
        uses: eq19/parser@v2
        id: set-parser
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          credentials: ${{ secrets.GCP_CREDENTIALS }}
          lexering_outputs: ${{ toJSON(needs.lexering.outputs) }}
  
      - name: üîß Evaluate Syntax
        uses: eq19/syntax@v2
        id: eval-syntax
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          credentials: ${{ secrets.GCP_CREDENTIALS }}
  
      - name: üöÄ Set Grammar Rules 
        uses: eq19/grammar@v1
        id: grammar-rules
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          credentials: ${{ secrets.GCP_CREDENTIALS }}
